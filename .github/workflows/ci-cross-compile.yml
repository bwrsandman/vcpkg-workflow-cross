name: Cross Compile CI
on:
  push:
    branches:
      - '*'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            preset: ninja-multi-vcpkg
            triplet: x64-linux
            setup: |
              sudo apt-get update 
              sudo apt-get install -y \
              libx11-dev libxext-dev \
              libgl1-mesa-dev libglu1-mesa-dev
          - os: ubuntu-latest
            preset: ninja-multi-vcpkg
            triplet: x86-linux
            setup: |
              sudo dpkg --add-architecture i386
              sudo apt-get update 
              sudo apt-get install -y \
              gcc-i686-linux-gnu \
              g++-i686-linux-gnu \
              libx11-dev:i386 libxext-dev:i386 \
              libgl1-mesa-dev:i386 libglu1-mesa-dev:i386
            cc: i686-linux-gnu-gcc
            cxx: i686-linux-gnu-g++
          - os: ubuntu-latest
            preset: ninja-multi-vcpkg
            triplet: arm64-linux
            setup: |
              sudo dpkg --add-architecture arm64
              echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy main restricted"                               | sudo tee    /etc/apt/sources.list.d/arm-cross-compile-sources.list
              echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates main restricted"                       | sudo tee -a /etc/apt/sources.list.d/arm-cross-compile-sources.list
              echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy universe"                                      | sudo tee -a /etc/apt/sources.list.d/arm-cross-compile-sources.list
              echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates universe"                              | sudo tee -a /etc/apt/sources.list.d/arm-cross-compile-sources.list
              echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy multiverse"                                    | sudo tee -a /etc/apt/sources.list.d/arm-cross-compile-sources.list
              echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-updates multiverse"                            | sudo tee -a /etc/apt/sources.list.d/arm-cross-compile-sources.list
              echo "deb [arch=arm64] http://ports.ubuntu.com/ jammy-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm-cross-compile-sources.list
              sudo sed -i 's/^deb /deb [arch=amd64] /g' /etc/apt/sources.list
              sudo apt-get update 
              sudo apt-get install -y \
              gcc-aarch64-linux-gnu \
              g++-aarch64-linux-gnu \
              libx11-dev:arm64 libxext-dev:arm64 \
              libgl1-mesa-dev:arm64 libglu1-mesa-dev:arm64
            cc: aarch64-linux-gnu-gcc
            cxx: aarch64-linux-gnu-g++
          - os: windows-latest
            preset: ninja-multi-vcpkg
            triplet: x64-windows
          - os: windows-latest
            preset: ninja-multi-vcpkg
            triplet: x86-windows
          - os: windows-latest
            preset: ninja-multi-vcpkg
            triplet: arm64-windows

    env:
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          submodules: recursive

      - name: Setup
        run: ${{ matrix.setup }}
        if: matrix.setup

      - uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Run CMake+vcpkg to build packages.
        id: cmake-vcpkg-build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: '${{ matrix.preset }}'
          configurePresetAdditionalArgs: "[`-DOPENBLACK_WARNINGS_AS_ERRORS=ON`, `-DVCPKG_TARGET_TRIPLET=${{ matrix.triplet}}` ]"
          buildPreset: '${{ matrix.preset }}-debug'
          testPreset: '${{ matrix.preset }}-debug'

      - name: Show packages
        if: always()
        run: find vcpkg/packages/
        shell: bash

      - name: Upload .log files
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: log-files-${{ matrix.triplet}}
          path: vcpkg/buildtrees/bgfx/*.log